###################
# Quickrun
###################
[[plugins]]
repo = 'thinca/vim-quickrun'
hook_add = '''
nnoremap <expr><silent> <C-c> quickrun#is_running() ? quickrun#sweep_sessions() : "\<C-c>"
nnoremap <leader>r :QuickRun<CR>
'''


###################
# Git
###################
[[plugins]]
repo = 'cohama/agit.vim'

###################
# CtrlP
###################
[[plugins]]
repo = 'ctrlpvim/ctrlp.vim'
hook_add = '''
let g:ctrlp_use_migemo = 1 " Don't install migemo yet
let g:ctrlp_clear_cache_on_exit = 0   " Doesn't cache clear when vim quit
let g:ctrlp_mruf_max            = 500 " Max memorable mru
let g:ctrlp_open_new_file       = 1   " Open new file as tab

set wildignore+=*/tmp/*,*.so,*.swp,*.zip     " MacOSX/Linux
set wildignore+=*\\tmp\\*,*.swp,*.zip,*.exe  " Windows

let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll)$',
  \ }
'''

[[plugins]]
repo = 'rking/ag.vim'
hook_add = '''
if executable('ag')
    let g:ctrlp_use_caching = 0
    let g:ctrlp_user_command = 'ag %s -i --nocolor --nogroup -g ""'
endif
'''


###################
# Coding support
###################
[[plugins]]
repo = 'junegunn/vim-easy-align.git'
hook_add = '''
xmap ga <Plug>(EasyAlign)
nmap ga <Plug>(EasyAlign)
'''

[[plugins]]
repo = 'bronson/vim-trailing-whitespace'

[[plugins]]
repo = 'soramugi/auto-ctags.vim'
hook_add = '''
let g:auto_ctags = 1
let g:auto_ctags_set_tags_option = 1
let g:auto_ctags_bin_path = 'y_ctags'
let g:auto_ctags_directory_list = ['.git']
let g:auto_ctags_tags_args = ['--append=yes', '--tag-relative=yes', '--recurse=yes', '--sort=foldcase']
'''

[[plugins]]
repo = 'tpope/vim-surround'

[[plugins]]
repo = 'nathanaelkane/vim-indent-guides'
hook_add = '''
let g:indent_guides_enable_on_vim_startup=1
'''

[[plugins]]
repo = 'thinca/vim-ref'

[[plugins]]
repo = 'AndrewRadev/splitjoin.vim'

###################
# View
###################
[[plugins]]
repo = 'b4b4r07/buftabs'
hook_add = '''
let g:buftabs_only_basename = 1
let g:buftabs_in_statusline = 1
let g:buftabs_active_highlight_group="Visual"
'''

[[plugins]] # Filer
repo = 'lambdalisue/fern.vim'
hook_add = '''
nmap <Leader>f :Fern . -reveal=% -drawer -toggle<CR>
command! Tree Fern . -reveal=% -drawer -toggle
let g:fern#disable_default_mappings          = 1
let g:fern#disable_viewer_spinner            = 1
let g:fern#mark_symbol                       = ''
let g:fern#renderer#default#collapsed_symbol = '▷ '
let g:fern#renderer#default#expanded_symbol  = '▼ '
let g:fern#renderer#default#leading          = ' '
let g:fern#renderer#default#leaf_symbol      = '| '
let g:fern#renderer#default#root_symbol      = '~ '

function! s:init_fern() abort
  setlocal nonumber
  setlocal signcolumn=no

  nmap <buffer> yy <Plug>(fern-action-yank:label)
  nmap <buffer>  Y <Plug>(fern-action-yank:path)

  " Define NERDTree like mappings
  nmap <buffer><expr>
    \ <Plug>(fern-action-open-or-expand-or-collapse)
    \ fern#smart#leaf(
    \   "<Plug>(fern-action-open)",
    \   "<Plug>(fern-action-expand:stay)",
    \   "<Plug>(fern-action-collapse)",
    \ )
  nmap <buffer> <CR> <Plug>(fern-action-open-or-expand-or-collapse)
  nmap <buffer> o <Plug>(fern-action-open:edit)
  nmap <buffer> go <Plug>(fern-action-open:edit)<C-w>p
  nmap <buffer> t <Plug>(fern-action-open:tabedit)
  nmap <buffer> T <Plug>(fern-action-open:tabedit)gT
  nmap <buffer> i <Plug>(fern-action-open:split)
  nmap <buffer> gi <Plug>(fern-action-open:split)<C-w>p
  nmap <buffer> s <Plug>(fern-action-open:vsplit)
  nmap <buffer> gs <Plug>(fern-action-open:vsplit)<C-w>p

  nmap <buffer> ma <Plug>(fern-action-new-leaf)
  nmap <buffer> mc <Plug>(fern-action-copy)
  nmap <buffer> md <Plug>(fern-action-remove)
  nmap <buffer> mm <Plug>(fern-action-move)

  nmap <buffer> C <Plug>(fern-action-enter)
  nmap <buffer> u <Plug>(fern-action-leave)
  nmap <buffer> r <Plug>(fern-action-reload)
  nmap <buffer> R gg<Plug>(fern-action-reload)<C-o>

  nmap <buffer> I <Plug>(fern-action-hidden:toggle)

  nmap <buffer> q :<C-u>quit<CR>
endfunction

augroup fern-custom
  autocmd! *
  autocmd FileType fern call s:init_fern()
augroup END
'''

[[plugins]] # Emoji
repo = 'rhysd/vim-gfm-syntax'
hook_add = '''
let g:gfm_syntax_emoji_conceal = 1
'''

[[plugins]]
repo = 'vim-scripts/AnsiEsc.vim'


###################
# MISC file type plugins
###################
[[plugins]]
repo = 'vim-scripts/groovyindent-unix'

[[plugins]]
repo = 'martinda/Jenkinsfile-vim-syntax'

[[plugins]]
repo = 'ekalinin/Dockerfile.vim'

[[plugins]]
repo = 'yasuhiroki/circleci.vim'
hook_add = '''
let g:circleci_omnifunc_enable = 0
'''

[[plugins]]
repo = 'yasuhiroki/github-actions-yaml.vim'
hook_add = '''
let g:gha_completion = 0
'''

[[plugins]]
repo = 'heavenshell/vim-jsdoc'

[[plugins]]
repo = 'posva/vim-vue'

[[plugins]]
repo = 'udalov/kotlin-vim'

[[plugins]]
repo = 'tpope/vim-markdown'
hook_add = '''
let g:markdown_syntax_conceal = 0
let g:markdown_fenced_languages = [
\   'ruby',
\   'sh=bash',
\   'json',
\]
'''

